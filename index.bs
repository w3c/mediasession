<pre class="metadata">
Title: Media Session Standard
Status: ED
ED: https://wicg.github.io/mediasession
Shortname: mediasession
Level: 1
Editor: Mounir Lamouri, Google Inc., mlamouri@google.com
Editor: Zhiqiang Zhang, Google Inc., zqzhang@google.com
Group: wicg
Logo: https://resources.whatwg.org/logo-mediasession.svg
Abstract: This specification enables web developers to show customize media
Abstract: metadata shown on platform UI, customize available platform media
Abstract: controls, and access platform media keys such as hardware keys found
Abstract: on keyboards, headsets, remote controls, and software keys found in
Abstract: notification areas and on lock screens of mobile devices.
!Participate: <a href="https://github.com/WICG/mediasession/issues/new">File an issue</a> (<a href="https://github.com/WICG/mediasession/issues?state=open">open issues</a>)
!Version History: <a href="https://github.com/WICG/mediasession/commits">https://github.com/WICG/mediasession/commits</a>
Ignored Vars: context, media, session
Boilerplate: omit conformance, omit feedback-header
</pre>

<script src=https://resources.whatwg.org/file-issue.js async></script>

<style>
  /* https://github.com/tabatkins/bikeshed/issues/485 */
  .example .self-link { display: none; }
</style>

<style>
table {
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
  font-weight: bold;
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}
</style>

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
    type: interface
        urlPrefix: dom.html
            text: Document
        urlPrefix: embedded-content.html
            text: HTMLMediaElement
        urlPrefix: webappapis.html
            text: EventHandler
    type: element
        urlPrefix: embedded-content.html
            text: video
            text: audio
    type: dfn
        urlPrefix: infrastructure.html
            text: case-sensitive; url: #case-sensitivity-and-string-comparison
            text: ASCII case-insensitive; url: #ascii-case-insensitive
            text: reflect
            text: limited to only known values
            text: remove an element from a document; url: #remove-an-element-from-a-document
            text: in parallel
            text: unordered set of unique space-separated tokens; url: #unordered-set-of-unique-space-separated-tokens
            text: document base url
        urlPrefix: embedded-content.html
            text: media element
            text: media element load algorithm
            text: potentially playing
            text: ended playback
            text: internal pause steps
        urlPrefix: infrastructure.html
            text: enumerated attribute
        urlPrefix: browsers.html
            text: browsing context
            text: top-level browsing context; url: #top-level-browsing-context
        urlPrefix: webappapis.html
            text: API base URL
            text: entry settings object
            text: event handler
            text: event handlers
            text: event handler event type
            text: event handler content attributes
            text: queue a task
            text: fire a simple event
            text: task
            text: task source
            text: DOM manipulation task source
        urlPrefix: semantics.html
            text: link; for: HTMLLinkElement; url:#the-link-element
    type: method
        urlPrefix: embedded-content.html
            text: play(); for: HTMLMediaElement; url: #dom-media-play
            text: pause(); for: HTMLMediaElement; url: #dom-media-pause
    type: attribute
        urlPrefix: embedded-content.html
            text: controls; url: #attr-media-controls
            text: paused; for: HTMLMediaElement; url: #dom-media-paused
            text: readyState; for: HTMLMediaElement; url: #dom-media-readystate
            text: HAVE_FUTURE_DATA; for: HTMLMediaElement; url: #dom-media-have_future_data
            text: HAVE_ENOUGH_DATA; for: HTMLMediaElement; url: #dom-media-have_enough_data
            text: networkState; for: HTMLMediaElement; url: #dom-media-networkstate
            text: NETWORK_LOADING; for: HTMLMediaElement; url: #dom-media-network_loading
            text: NETWORK_IDLE; for: HTMLMediaElement; url: #dom-media-network_idle
        urlPrefix: semantics.html
            text: sizes; for: HTMLLinkElement; url: #attr-link-sizes;
    type: event
        urlPrefix: embedded-content.html
            text: pause; url: #event-media-pause
            text: play; url: #event-media-play
urlPrefix: https://url.spec.whatwg.org/; spec: URL
    type: dfn; urlPrefix: #concept-
        text: url parser
        text: event listener
    type: dfn
        text: absolute URL; url: #syntax-url-absolute
        text: relative URL; url: #syntax-url-relative
urlPrefix: https://fetch.spec.whatwg.org/; spec: FETCH
    type: dfn; urlPrefix: #concept-
        text: fetch
        text: request
        text: context; url: request-context
        text: context frame type; url: request-context-frame-type
        text: internal response
        text: origin; url: request-origin
        text: referrer; url: request-referrer
        text: response
        text: response type
        text: url; url: request-url
    type: dfn;
        text: force Origin header flag
urlPrefix: https://webaudio.github.io/web-audio-api/; spec: WEBAUDIO
    type: interface
        text: AudioContext
    type: attribute; urlPrefix: #widl-
        text: state; url: AudioContext-state
    type: enum; urlPrefix: #idl-def-AudioContextState.
        text: suspended
        text: running
        text: closed
    type: method; urlPrefix: #widl-
        text: suspend(); url: AudioContext-suspend-Promise-void
        text: resume(); url: AudioContext-resume-Promise-void
urlPrefix: https://dom.spec.whatwg.org/; spec: WHATWG-DOM
    type: interface; urlPrefix: #interface-
        text: EventTarget
        text: Event
urlPrefix: http://www.w3.org/TR/page-visibility/; spec: PAGE-VISIBILITY
    type: attribute
        text: visibilityState; url: #dom-document-visibilitystate
    type: event
        text: visibilitychange; url: #sec-visibilitychange-event
    type: enum; urlPrefix: #pv-page-
        text: visible
        text: hidden
urlPrefix: https://www.w3.org/TR/appmanifest/; spec: appmanifest
    type: dfn
        text: image object; url: #dfn-image-object
urlPrefix: https://heycam.github.io/webidl/
    type: exception
        text: InvalidStateError
        text: NotAllowedError
</pre>

<h2 id="introduction">Introduction</h2>

<em>This section is non-normative.</em>

Media is used extensively today, and the Web is one of the primary means of
consuming media content. Many platforms can display media metadata, such as
title, artist, album and album art on various UI elements such as notification,
media control center, device lockscreen and wearable devices. This specification
aims to enable web pages to specify the media metadata to be displayed in
platform UI, and respond to media controls which may come from platform UI or
media keys, therefore improves the user experience.

<h2 id="conformance">Conformance</h2>

All diagrams, examples, and notes in this specification are non-normative, as
are all sections explicitly marked non-normative. Everything else in this
specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119. For readability, these
words do not appear in all uppercase letters in this specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms (such as "strip any
leading space characters" or "return false and terminate these steps") are to be
interpreted with the meaning of the key word ("must", "should", "may", etc) used
in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be easy
to follow, and not intended to be performant.)

User agents may impose implementation-specific limits on otherwise unconstrained
inputs, e.g. to prevent denial of service attacks, to guard against running out
of memory, or to work around platform-specific limitations.

When a method or an attribute is said to call another method or attribute, the
user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods
with custom properties or functions in JavaScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a>
manner.

<h2 id="dependencies">Dependencies</h2>

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]

<h2 id="the-mediasession-interface">The {{MediaSession}} interface</h2>

<pre class="idl">
[Exposed=(Window)]
partial interface Navigator {
  readonly attribute MediaSession mediaSession;
};

enum MediaSessionPlaybackState {
  "none",
  "paused",
  "playing"
};

enum MediaSessionAction {
  "play",
  "pause",
  "seekbackward",
  "seekforward",
  "previoustrack",
  "nexttrack",
};

callback MediaSessionActionHandler = void();

[Exposed=Window]
interface MediaSession : EventHandler {
  attribute MediaMetadata? metadata;

  attribute MediaSessionPlaybackState playbackState;

  void setActionHandler(MediaSessionAction action, MediaSessionActionHandler? handler);
};
</pre>

<p>
  A {{MediaSession}} objects represents a media session for a given document and
  allows a document to communicate to the user agent some information about the
  playback and how to handle it.
</p>

<p>
  A {{MediaSession}} has an associated <dfn for="MediaSession">metadata</dfn>
  object represented by a {{MediaMetadata}}. It is initialy <code>null</code>.
</p>

<p>
  The <dfn attribute for="Navigator"><code>mediaSession</code></dfn> attribute
  MUST return the {{MediaSession}} instance associated with the {{Navigator}}
  object.
</p>

<p>
  The <dfn attribute for="MediaSession"><code>metadata</code></dfn> attribute
  reflects the {{MediaSession}}'s <a for=MediaSession>metadata</a>. On getting,
  it MUST return the {{MediaSession}}'s <a for=MediaSession>metadata</a>. On
  setting it MUST run the following steps with <var>value</var> being the new
  value being set:
  <ol>
    <li>
      If the {{MediaSession}}'s <a for=MediaSession>metadata</a> is not
      <code>null</code>, set its <a for=MediaMetadata>media session</a> to
      <code>null</code>.
    </li>
    <li>
      Set the {{MediaSession}}'s <a for=MediaSession>metadata</a> to
      <var>value</var>.
    </li>
    <li>
      If the {{MediaSession}}'s <a for=MediaSession>metadata</a> is not
      <code>null</code>, set its <a for=MediaMetadata>media session</a> to the
      current {{MediaSession}}.
    </li>
    <li>
      <a>In parallel</a>, run the <a>update metadata algorithm</a>.
    </li>
  </ol>
</p>

<p>
  The <dfn attribute for="MediaSession"><code>playbackState</code></dfn>
  attribute represents the <dfn lt="playback state">playback state</dfn> of the
  <a>media session</a>. The default value is <a enum-value
  for="MediaSessionPlaybackState">none</a>. On setting, the user agent MUST
  update the <a>active media session</a> and run the <a>media session actions
  update algorithm</a> if needed. On getting, the user agent MUST return the
  last valid value that was set. If none, it MUST return <a enum-value
  for="MediaSessionPlaybackState">none</a>.
</p>

<p>
  The {{MediaSessionPlaybackState}} enum is used to indicate the <a>playback
  state</a>, the values are described as follows:

  <ul>
    <li>
      <dfn enum-value for="MediaSessionPlaybackState">none</dfn> means the page
      does not specify whether it's playing or paused.
    </li>
    <li>
      <dfn enum-value for="MediaSessionPlaybackState">playing</dfn> means the
      page is currently playing media and it can be paused.
    </li>
    <li>
      <dfn enum-value for="MediaSessionPlaybackState">paused</dfn> means the
      page has paused media and it can be resumed.
    </li>
  </ul>
</p>

<p>
  The <dfn method for=MediaSession>setActionHandler()</dfn> method, when
  invoked, MUST run the <a>update action handler algorithm</a> with
  <var>action</var> and <var>handler</var> on the {{MediaSession}}.
</p>

<h2 id="the-mediametadata-interface">The {{MediaMetadata}} interface</h2>

<pre class="idl">

[Constructor(optional MediaMetadataInit init)]
interface MediaMetadata {
  attribute DOMString title;
  attribute DOMString artist;
  attribute DOMString album;
  attribute FrozenArray&lt;MediaImage> artwork;
};

dictionary MediaMetadataInit {
  DOMString title = "";
  DOMString artist = "";
  DOMString album = "";
  sequence&lt;MediaImageInit> artwork = [];
};
</pre>

<p>
  A {{MediaMetadata}} object is a representation of the metadata associated with
  a {{MediaSession}} that can be used by user agents to provide customized user
  interface.
</p>

<p>
  A {{MediaMetadata}} can have an associated <dfn for="MediaMetadata">media
  session</dfn>.
</p>

<p>
  A {{MediaMetadata}} has an associated <dfn for="MediaMetadata">title</dfn>,
  <dfn for="MediaMetadata">artist</dfn> and <dfn for="MediaMetadata">album</dfn>
  which are DOMString.
</p>

<p>
  A {{MediaMetadata}} has an associated <dfn for="MediaMetadata" title="artwork
  image">artwork images</dfn> which is a FrozenArray of {{MediaImage}}s.
</p>

<p>
  A {{MediaMetadata}} is said to be an <dfn>empty metadata</dfn> if it is equal
  to <code>null</code> or all the following conditions are true:
  <ul>
    <li>It's <a for=MediaMetadata>title</a> is the empty string.</li>
    <li>It's <a for=MediaMetadata>artist</a> is the empty string.</li>
    <li>It's <a for=MediaMetadata>album</a> is the empty string.</li>
    <li>It's <a for=MediaMetadata title='artwork image'>artwork images</a>
    length is <code>0</code>.</li>
  </ul>
</p>

<p>
  The <dfn constructor
  for="MediaMetadata"><code>MediaMetadata(<var>init</var>)</code></dfn>
  constructor, when invoked, MUST run the following steps:

  <ol>
    <li>
      Let <var>metadata</var> be a new {{MediaMetadata}} object.
    </li>
    <li>
      Set <var>metadata</var>'s {{MediaMetadata/title}} to <var>init</var>'s
      {{MediaMetadataInit/title}}.
    </li>
    <li>
      Set <var>metadata</var>'s {{MediaMetadata/artist}} to <var>init</var>'s
      {{MediaMetadataInit/artist}}.
    </li>
    <li>
      Set <var>metadata</var>'s {{MediaMetadata/album}} to
      <var>init</var>'s {{MediaMetadataInit/album}}.
    </li>
    <li>
      Set <var>metadata</var>'s {{MediaMetadata/artwork}} using
      <var>init</var>'s {{MediaMetadataInit/artwork}} by calling the
      <a><code>MediaImage(init)</code></a> constructor.
    </li>
    <li>
      Return <var>metadata</var>.
    </li>
  </ol>
</p>

<p>
  The <dfn attribute for="MediaMetadata"><code>title</code></dfn> attribute
  reflects the {{MediaMetadata}}'s <a for=MediaMetadata>title</a>. On getting,
  it MUST return the {{MediaMetadata}}'s <a for=MediaMetadata>title</a>. On
  setting, it MUST set the {{MediaMetadata}}'s <a for=MediaMetadata>title</a> to
  the given value.
</p>

<p>
  The <dfn attribute for="MediaMetadata"><code>artist</code></dfn> attribute
  reflects the {{MediaMetadata}}'s <a for=MediaMetadata>artist</a>. On getting,
  it MUST return the {{MediaMetadata}}'s <a for=MediaMetadata>artist</a>. On
  setting, it MUST set the {{MediaMetadata}}'s <a for=MediaMetadata>artist</a>
  to the given value.
</p>

<p>
  The <dfn attribute for="MediaMetadata"><code>album</code></dfn> attribute
  reflects the {{MediaMetadata}}'s <a for=MediaMetadata>album</a>. On getting,
  it MUST return the {{MediaMetadata}}'s <a for=MediaMetadata>album</a>. On
  setting, it MUST set the {{MediaMetadata}}'s <a for=MediaMetadata>album</a> to
  the given value.
</p>

<p>
  The <dfn attribute for="MediaMetadata"><code>artwork images</code></dfn>
  attribute reflects the {{MediaMetadata}}'s <a for=MediaMetadata>artwork
  images</a>. On getting, it MUST return the {{MediaMetadata}}'s <a
  for=MediaMetadata>artwork images</a>. On setting, it MUST set the
  {{MediaMetadata}}'s <a for=MediaMetadata>artwork images</a> to the given
  value.
</p>

<p>
  When {{MediaMetadata}}'s <a for=MediaMetadata>title</a>, <a
  for=MediaMetadata>artist</a>, <a for=MediaMetadata>album</a> or <a
  for=MediaMetadata>artwork images</a> are modified, the user agent MUST run the
  following steps:
  <ol>
    <li>
      If the intance has no associated <a for=MediaMetadata>media session</a>,
      abort these steps.
    </li>
    <li>
      Otherwise, <a>queue a task</a> to run the following substeps:
      <ol>
        <li>
          If the instance no longer has an associated <a for=MediaMetadata>media
          session</a>, abort these steps.
        </li>
        <li>
          Otherwise, <a>in parallel</a>, run the <a>update metadata
          algorithm</a>.
        </li>
      </ol>
    </li>
  </ol>
</p>

<h2 id="the-mediaimage-interface">The {{MediaImage}} interface</h2>

<pre class="idl">

[Constructor(optional MediaImageInit init)]
interface MediaImage {
  readonly attribute USVString src;
  readonly attribute DOMString sizes;
  readonly attribute DOMString type;
};

dictionary MediaImageInit {
  USVString src = "";
  DOMString sizes = "";
  DOMString type = "";
};
</pre>

A {{MediaImage}} object has a <dfn for="MediaImage">source</dfn>, a list of
<dfn for="MediaImage">sizes</dfn>, and a <dfn for="MediaImage">type</dfn>.

The <dfn constructor
for="MediaImage"><code>MediaImage(<var>init</var>)</code></dfn>
constructor, when invoked, MUST run the following steps:

<ol>
  <li>
    Let <var>metadata</var> be a new {{MediaImage}} object.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/src}} to <var>init</var>'s
    {{MediaImageInit/src}}. If the URL is a
    <a>relative URL</a>, it MUST be resolved to an <a>absolute URL</a> using the
    <a>document base URL</a>.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/sizes}} to <var>init</var>'s
    {{MediaImageInit/sizes}}.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/type}} to <var>init</var>'s
    {{MediaImageInit/type}}.
  </li>
  <li>
    Return <var>metadata</var>.
  </li>
</ol>


The MediaImage <a attribute for="MediaImage">src</a>, <a attribute
for="MediaImage">sizes</a> and <a attribute for="MediaImage">type</a>
inspired from the <a lt="image object">image objects</a> in Web App Manifest.

The <dfn attribute for="MediaImage">src</dfn> attribute MUST return the
{{MediaImage}} object's <a for="MediaImage">source</a>. It is a URL from which
the user agent can fetch the image's data.

The <dfn attribute for="MediaImage">sizes</dfn> attribute MUST return the
{{MediaImage}} object's <a for="MediaImage">sizes</a>. It follows the spec of <a
attribute for="HTMLLinkElement"><code>sizes</code></a> attribute in HTML
<a for="HTMLLinkElement"><code>link</code></a> element, which is a string
consisting of an <a>unordered set of unique space-separated tokens</a> which are
<a>ASCII case-insensitive</a> that represents the dimensions of an image. Each
keyword is either an <a>ASCII case-insensitive</a> match for the string "any",
or a value that consists of two valid non-negative integers that do not have a
leading U+0030 DIGIT ZERO (0) character and that are separated by a single
U+0078 LATIN SMALL LETTER X or U+0058 LATIN CAPITAL LETTER X character. The
keywords represent icon sizes in raw pixels (as opposed to CSS pixels). When
multiple image objects are available, a user agent MAY use the value to decide
which icon is most suitable for a display context (and ignore any that are
inappropriate). The parsing steps for the <a attribute
for="MediaImage">sizes</a> attribute MUST follow <a attribute
for="HTMLLinkElement" lt="sizes">the parsing steps for HTML <code>link</code>
element <code>sizes</code> attribute</a>.

The <dfn attribute for="MediaImage">type</dfn> attribute MUST return the
{{MediaImage}} object's <a for="MediaImage">type</a>. It is a hint as to the
media type of the image. The purpose of this attribute is to allow a user agent
to ignore images of media types it does not support.

<h2 id="media-controls">Media Controls</h2>

<p>
  A <dfn>media session action</dfn> is an action that the page can handle in
  order for the user to interact with the {{MediaSession}}. For example, a page
  can handle some actions that will then be triggered when the user presses
  buttons from a headset or other remote device.
</p>

<p>
  A <dfn title='media session action source'>media session action source</dfn>
  is a source that might produce a <a>media session action</a>. Such source can
  be the platform or the UI surfaces created by the user agent.
</p>

<p>
  A <a>media session action</a> is represented by a {{MediaSessionAction}} which
  can have one of the following value:
  <ul>
    <li>
      <dfn enum-value for=MediaSessionAction>play</dfn>: the action intent is to
      resume the playback.
    </li>
    <li>
      <dfn enum-value for=MediaSessionAction>pause</dfn>: the action intent is
      to pause a currently active playback.
    </li>
    <li>
      <dfn enum-value for=MediaSessionAction>seekbackward</dfn>: the action
      intent is to move the playback time backward by a short period (eg. few
      seconds).
    </li>
    <li>
      <dfn enum-value for=MediaSessionAction>seekforward</dfn>: the action
      intent is to move the playback time forward by a short period (eg. few
      seconds).
    </li>
    <li>
      <dfn enum-value for=MediaSessionAction>previoustrack</dfn>: the action
      intent is to either start the current playback from the beginning if the
      playback has a notion of beginning or move to the previous item in the
      playlist if the playback has a notion of playlist.
    </li>
    <li>
      <dfn enum-value for=MediaSessionAction>nexttrack</dfn>: the action is to
      move to the playback to the next item in the playlist if the playback has
      a notion of playlist.
    </li>
  </ul>
</p>

<p>
  All {{MediaSession}} have a map of <dfn>supported media session actions</dfn>
  with, as a key, a <a>media session action</a> and as a value a
  {{MediaSessionActionHandler}}.
</p>

<p>
  When the <dfn>update action handler algorithm</dfn> on a given
  {{MediaSession}} with <var>action</var> and <var>handler</var> parameters is
  invoked, the user agent MUST run the following steps:
  <ol>
    <li>
      If <var>handler</var> is <code>null</code>, remove <var>action</var> from
      the <a>supported media session action</a> for {{MediaSession}} and abort
      these steps.
    </li>
    <li>
      Add <var>action</var> to the <a>supported media session actions</a> for
      {{MediaSession}} and associate to it the <var>handler</var>.
    </li>
  </ol>
</p>

<p>
  When the <a>supported media session actions</a> are changed, the user agent
  SHOULD run the <a>media session actions update algorithm</a>. The user agent
  MAY <a>queue a task</a> in order to run the <a>media session actions update
  algorithm</a> in order to avoid UI flickering when multiple actions are
  modified in the same event loop.
</p>

<p>
  When the user agent is notified by a <a>media session action source</a> that a
  <a>media session action</a> named <var>action</var> has been trigerered, the
  user agent MUST run the <dfn>handle media session action</dfn> steps as
  follow:
  <ol>
    <li>
      If the <a>active media session</a> is <code>null</code>, abort these
      steps.
    </li>
    <li>
      Let <var>actions</var> be the <a>active media session</a>'s <a>supported
      media session actions</a>.
    </li>
    <li>
      If <var>actions</var> does not contain the key <var>action</var>, abort
      these steps.
    </li>
    <li>
      Let <var>handler</var> be the {{MediaSessionActionHandler}} associated
      with the key <var>action</var> in <var>actions</var>.
    </li>
    <li>
      Run <var>handler</var>.
    </li>
  </ol>
</p>

<p>
  When the user agent receives a joint command for <a enum-value
  for=MediaSessionAction>play</a> and <a enum-value
  for=MediaSessionAction>pause</a>, such as a headset button click, it MUST run
  the following steps:
  <ol>
    <li>
      If the <a>active media session</a> is <code>null</code>, abort these
      steps.
    </li>
    <li>
      Let <var>action</var> be a <a>media session action</a>.
    </li>
    <li>
      If the <a>actual playback state</a> of the <a>active media session</a> is
      <a enum-value for="MediaSessionPlaybackState">playing</a>, set
      <var>action</var> to <a enum-value for=MediaSessionAction>pause</a>.
    </li>
    <li>
      Otherwise, set <var>action</var> to <a enum-value
      for=MediaSessionAction>play</a>.
    </li>
    <li>
      Run the <a>handle media session action</a> steps with <var>action</var>.
    </li>
  </ol>
</p>

<p>
  It is RECOMMENDED for user agents to implement a default handler for the <a
  enum-value for=MediaSessionAction>play</a> and <a enum-value
  for=MediaSessionAction>pause</a> <a>media session actions</a> if none was
  provided for the <a>active media session</a>.
</p>

<p>
  A user agent MAY automatically pause any audible player after a <a enum-value
  for=MediaSessionAction>pause</a> <a>media session action</a> has been handled
  by the page.
</p>

<p class=note>
  A page should only register a {{MediaSessionActionHandler}} for a <a>media
  session action</a> when it can handle the action given that the user agent
  will list this as a <a>supported media session actions</a> and update the
  <a>media session action sources</a>.
</p>

<h2 id="processing-model">Processing model</h2>

<h3 id="determining-actual-playback-state">Determining the <a>actual playback
state</a></h3>

<p>
  The <a attribute for="MediaSession">playbackState</a> attribute is to let the
  page specify the current <a>playback state</a>. However the <a>playback
  state</a> is a hint from the page and and MAY be overriden by the user agent.
  The state after user agent override is called <a>actual playback state</a>.
</p>

<p>
  The <dfn>actual playback state</dfn> SHOULD return the last value that was set
  on <a attribute for="MediaSession">playbackState</a>. If the user agent
  believes the actual playback state is <a enum-value
  for="MediaSessionPlaybackState">playing</a> and the <a attribute
  for="MediaSession">playbackState</a> returns a different value, it MAY return
  <a enum-value for="MediaSessionPlaybackState">playing</a> instead.
</p>

<p>
  When the <a>actual playback state</a> is updated, the user agent agent SHOULD
  run the <a>media session actions update algorithm</a>.
</p>

<h3 id="media-session-routing">Media session routing</h3>

There could be multiple {{MediaSession}} objects existing at the same time since
the user agent could have multiple tabs, each tab could contain a <a>top-level
browsing context</a> and multiple <a>nested browsing contexts</a>, and each
<a>browsing context</a> could have a {{MediaSession}} object.

The user agent MUST select at most one of the {{MediaSession}} objects to
present it to the user, which is called the <dfn>active media session</dfn>. The
<a>active media session</a> may be null. The selection is up the user agent and
SHOULD base on preferred user experience.

It is RECOMMENDED that the user agent selects the <a>active media session</a>
by managing <a>audio focus</a>. A tab or <a>browsing context</a> is said to have
<dfn>audio focus</dfn> if it is currently playing audio or the user expects to
control the media in it. The AudioFocus API targets at this area and could be
used once it's finished.

Whenever the <a>active media session</a> is changed, the user agent MUST run the
<a>media session actions update algorithm</a> and the <a>update metadata
algorithm</a>.

<h3 id="processing-media-metadata">Processing metadata</h3>

The media metadata for the <a>active media session</a> MAY be displayed in the
platform UI depending on platform conventions. Whenever the
<a>active media session</a> changes or setting <a attribute
for="MediaSession"><code>metadata</code></a> of the <a>active media session</a>,
the user agent MUST run the <dfn>update metadata algorithm</dfn>. The steps are
as follows:

<ol>
  <li>
    If the <a>active media session</a> is null, unset the media metadata
    presented to the platform, and terminate these steps.
  </li>
  <li>
    If the <a attribute for="MediaSession"><code>metadata</code></a> of the
    <a>active media session</a> is an <a>empty metadata</a>, unset the media
    metadata presented to the platform, and terminate these steps.
  </li>
  <li>
    Update the media metadata presented to the platform to match the <a
    attribute for="MediaSession"><code>metadata</code></a> for the
    <a>active media session</a>.
  </li>
  <li>
    If the user agent wants to display <a>artwork image</a>, it is RECOMMENDED
    to run the <a>fetch image algorithm</a>.
  </li>
</ol>

The RECOMMENDED <dfn>fetch image algorithm</dfn> is as follows:

<ol>
  <!-- XXX https://www.w3.org/Bugs/Public/show_bug.cgi?id=24055 -->
  <li>
    If there are other <a>fetch image algorithm</a> running, cancel existing
    algorithm execution instances.
  </li>
  <li>
    If <var>metadata</var>'s <a attribute
    for="MediaMetadata"><code>artwork</code></a> of the <a>active media
    session</a> is empty, then terminate these steps.
  </li>
  <li>
    If the platform supports displaying media artwork, select a <dfn>preferred
    artwork image</dfn>
    from <var>metadata</var>'s <a attribute
    for="MediaMetadata"><code>artwork</code></a> of the <a>active media
    session</a>.
  </li>
  <li>
    <a title="fetch">Fetch</a> the <a>preferred artwork image</a>'s
    {{MediaImage/src}}.

    Then, <a>in parallel</a>:

    <ol>
      <li>
        Wait for the <a>response</a>.
      </li>
      <li>
        If the <a>response</a>'s <a>internal response</a>'s
        <a lt="response type">type</a> is <i>default</i>, attempt to decode the
        resource as image.
      </li>
      <li>
        If the image format is supported, use the image as the artwork for
        display in platform UI. Otherwise the <a>fetch image algorithm</a> fail
        and terminate.
      </li>
    </ol>
  </li>
</ol>

If no artwork images are fetched in the <a>fetch image algorithm</a>, the user
agent MAY have fallback behavior such as displaying an default image as artwork.

<h3 id="processing-media-session-actions">Processing <a>media session
actions</a></h3>

<p>
  When the <dfn>media session actions update algorithm</dfn> is invoked, the
  user agent MUST run the following steps:
  <ol>
    <li>
      Let <var>available actions</var> be an array of <a>media session
      actions</a>.
    </li>
    <li>
      If the <a>active media session</a> is null, set <var>available
      actions</var> to the empty array.
    </li>
    <li>
      Otherwise, set the <var>available actions</var> to the list of keys
      available in the <a>active media session</a>'s <a>supported media session
      actions</a>.
    </li>
    <li>
      For each <a>media session action source</a> <var>source</var>, run the
      following substeps:
      <ol>
        <li>
          Optionally, if the <a>active media session</a> is not null:
          <ol>
            <li>
              If the <a>active media session</a>'s <a>actual playback state</a>
              is <a enum-value for="MediaSessionPlaybackState">playing</a>,
              remove <a enum-value for=MediaSessionAction>play</a> from
              <var>available actions</var>.
            </li>
            <li>
              Otherwise, remove <a enum-value for=MediaSessionAction>pause</a>
              from <var>available actions</var>.
            </li>
          </ol>
        </li>
        <li>
          If the <var>source</var> is a UI element created by the user agent, it
          MAY remove some elements from <var>available actions</var> if there
          are too many of them compared to the available space.
        </li>
        <li>
          Notify the <var>source</var> with the updated list of <var>available
          actions</var>.
        </li>
      </ol>
    </li>
  </ol>
</p>

<h2 id="examples">Examples</h2>

<em>This section is non-normative.</em>

<div class="example" id="example-setting-metadata">
  Setting <a for=MediaSession>metadata</a>:

  <pre class="lang-javascript">
    window.navigator.mediaSession.metadata = new MediaMetadata({
      title: "Episode Title",
      artist: "Podcast Host",
      album: "Podcast Title",
      artwork: [{src: "podcast.jpg"}]
    });
  </pre>

  Alternatively, providing multiple <a for="MediaMetadata" title="artwork
  image">artwork images</a> in the metadata can let the user agent be able to
  select different artwork images for different display purposes and better fit
  for different screens:

  <pre class="lang-javascript">
    window.navigator.mediaSession.metadata = new MediaMetadata({
      title: "Episode Title",
      artist: "Podcast Host",
      album: "Podcast Title",
      artwork: [
        {src: "podcast.jpg", sizes: "128x128", type: "image/jpeg"},
        {src: "podcast_hd.jpg", sizes: "256x256"},
        {src: "podcast_xhd.jpg", sizes: "1024x1024", type: "image/jpeg"},
        {src: "podcast.png", sizes: "128x128", type: "image/png"},
        {src: "podcast_hd.png", sizes: "256x256", type: "image/png"},
        {src: "podcast.ico", sizes: "128x128 256x256", type: "image/x-icon"}
      ]
    });
  </pre>

  For example, if the user agent wants to use an image as icon, it may choose
  <code>"podcast.jpg"</code> or <code>"podcast.png"</code> for a
  low-pixel-density screen, and <code>"podcast_hd.jpg"</code>
  or <code>"podcast_hd.png"</code> for a high-pixel-density screen. If the user
  agent want to use an image for lockscreen background,
  <code>"podcast_xhd.jpg"</code> will be preferred.

</div>

<div class="example" id="example-changing-metadata">
  Changing <a for=MediaSession>metadata</a>:

  For playlists or chapters of an audio book, multiple <a>media elements</a> can
  share a single <a>media session</a>.

  <pre class="lang-javascript">
    var audio1 = document.createElement("audio");
    audio1.src = "chapter1.mp3";

    var audio2 = document.createElement("audio");
    audio2.src = "chapter2.mp3";

    audio1.play();
    audio1.addEventListener("ended", function() {
      audio2.play();
    });
  </pre>

  Because the session is shared, the metadata must be updated to reflect what is
  currently playing.

  <pre class="lang-javascript">
    function updateMetadata(event) {
      window.navigator.mediaSession.metadata = new MediaMetadata({
        title: event.target == audio1 ? "Chapter 1" : "Chapter 2",
        artist: "An Author",
        album: "A Book",
        artwork: [{src: "cover.jpg"}]
      });
    }

    audio1.addEventListener("play", updateMetadata);
    audio2.addEventListener("play", updateMetadata);
  </pre>
</div>

<div class="example" id="example-media-controls">
  Handling <a>media session actions</a>:
<pre>
var tracks = ["chapter1.mp3", "chapter2.mp3", "chapter3.mp3"];
var trackId = 0;

var audio = document.createElement("audio");
audio.src = tracks[trackId];

void updatePlayingMedia() {
    audio.src = tracks[trackId];
    // Update metadata (omitted)
}

window.navigator.mediaSession.onprevioustrack = function() {
   trackId = (trackId + tracks.length - 1) % tracks.length;
   updatePlayingMedia();
}

window.navigator.mediaSession.onnexttrack = function() {
   trackId = (trackId + 1) % tracks.length;
   updatePlayingMedia();
}

</pre>
</div>

<h2 id="acknowledgments" class="no-num">Acknowledgments</h2>

The editor would like to thank Paul Adenot, Jake Archibald, Tab Atkins, Jonathan
Bailey, Marcos Caceres, Domenic Denicola, Ralph Giles, Anne van Kesteren, Tobie
Langel, Michael Mahemoff, Jer Noble, Elliott Sprehn, Chris Wilson, and Jörn
Zaefferer for their participation in technical discussions that ultimately made
this specification possible.

Special thanks go to Philip Jägenstedt and David Vest for their help in
designing every aspect of media sessions and for their seemingly infinite
patience in working through the initial design issues; Jer Noble for his help in
building a model that also works well within the iOS audio focus model; and
Mounir Lamouri and Anton Vayvod for their early involvement, feedback and
support in making this specification happen.

This standard is written by Rich Tibbett (<a
href="http://www.opera.com">Opera</a>, <a
href="mailto:richt@opera.com">richt@opera.com</a>).

Per <a rel="license"
href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent
possible under law, the editors have waived all copyright and related or
neighboring rights to this work.

<script id=head src=https://resources.whatwg.org/dfn.js></script>
