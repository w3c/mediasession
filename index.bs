<pre class="metadata">
Title: Media Session Standard
Group: WHATWG
H1: Media Session
Shortname: mediasession
Status: LS
No Editor: true
Logo: https://resources.whatwg.org/logo-mediasession.svg
Abstract: This specification enables web developers to obtain different levels
Abstract: of platform media focus, customize available platform media controls,
Abstract: and access platform media keys such as hardware keys found on
Abstract: keyboards, headsets, remote controls, and software keys found in
Abstract: notification areas and on lock screens of mobile devices.
!Participate: <a href="https://github.com/whatwg/mediasession/issues/new">File an issue</a> (<a href="https://github.com/whatwg/mediasession/issues?state=open">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Version History: <a href="https://github.com/whatwg/mediasession/commits">https://github.com/whatwg/mediasession/commits</a>
Ignored Vars: context, media, session
Boilerplate: omit conformance, omit feedback-header
</pre>

<script src=https://resources.whatwg.org/file-issue.js async></script>

<style>
  /* https://github.com/tabatkins/bikeshed/issues/485 */
  .example .self-link { display: none; }
</style>

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
    type: interface
        urlPrefix: dom.html
            text: Document
        urlPrefix: embedded-content.html
            text: HTMLMediaElement
        urlPrefix: webappapis.html
            text: EventHandler
    type: element
        urlPrefix: embedded-content.html
            text: video
            text: audio
    type: dfn
        urlPrefix: infrastructure.html
            text: case-sensitive; url: #case-sensitivity-and-string-comparison
            text: ASCII case-insensitive; url: #ascii-case-insensitive
            text: reflect
            text: limited to only known values
            text: remove an element from a document; url: #remove-an-element-from-a-document
            text: in parallel
            text: unordered set of unique space-separated tokens; url: #unordered-set-of-unique-space-separated-tokens
            text: document base url
        urlPrefix: embedded-content.html
            text: media element
            text: media element load algorithm
            text: potentially playing
            text: ended playback
            text: internal pause steps
        urlPrefix: infrastructure.html
            text: enumerated attribute
        urlPrefix: browsers.html
            text: browsing context
            text: top-level browsing context; url: #top-level-browsing-context
        urlPrefix: webappapis.html
            text: API base URL
            text: entry settings object
            text: event handlers
            text: event handler event type
            text: event handler content attributes
            text: queue a task
            text: fire a simple event
            text: task
            text: task source
            text: DOM manipulation task source
        urlPrefix: semantics.html
            text: link; for: HTMLLinkElement; url:#the-link-element
    type: method
        urlPrefix: embedded-content.html
            text: play(); for: HTMLMediaElement; url: #dom-media-play
            text: pause(); for: HTMLMediaElement; url: #dom-media-pause
    type: attribute
        urlPrefix: embedded-content.html
            text: controls; url: #attr-media-controls
            text: paused; for: HTMLMediaElement; url: #dom-media-paused
            text: readyState; for: HTMLMediaElement; url: #dom-media-readystate
            text: HAVE_FUTURE_DATA; for: HTMLMediaElement; url: #dom-media-have_future_data
            text: HAVE_ENOUGH_DATA; for: HTMLMediaElement; url: #dom-media-have_enough_data
            text: networkState; for: HTMLMediaElement; url: #dom-media-networkstate
            text: NETWORK_LOADING; for: HTMLMediaElement; url: #dom-media-network_loading
            text: NETWORK_IDLE; for: HTMLMediaElement; url: #dom-media-network_idle
        urlPrefix: semantics.html
            text: sizes; for: HTMLLinkElement; url: #attr-link-sizes;
    type: event
        urlPrefix: embedded-content.html
            text: pause; url: #event-media-pause
            text: play; url: #event-media-play
urlPrefix: https://url.spec.whatwg.org/; spec: URL
    type: dfn; urlPrefix: #concept-
        text: url parser
        text: event listener
    type: dfn
        text: absolute URL; url: #syntax-url-absolute
        text: relative URL; url: #syntax-url-relative
urlPrefix: https://fetch.spec.whatwg.org/; spec: FETCH
    type: dfn; urlPrefix: #concept-
        text: fetch
        text: request
        text: context; url: request-context
        text: context frame type; url: request-context-frame-type
        text: internal response
        text: origin; url: request-origin
        text: referrer; url: request-referrer
        text: response
        text: response type
        text: url; url: request-url
    type: dfn;
        text: force Origin header flag
urlPrefix: https://webaudio.github.io/web-audio-api/; spec: WEBAUDIO
    type: interface
        text: AudioContext
    type: attribute; urlPrefix: #widl-
        text: state; url: AudioContext-state
    type: enum; urlPrefix: #idl-def-AudioContextState.
        text: suspended
        text: running
        text: closed
    type: method; urlPrefix: #widl-
        text: suspend(); url: AudioContext-suspend-Promise-void
        text: resume(); url: AudioContext-resume-Promise-void
urlPrefix: https://dom.spec.whatwg.org/; spec: WHATWG-DOM
    type: interface; urlPrefix: #interface-
        text: EventTarget
        text: Event
urlPrefix: http://www.w3.org/TR/DOM-Level-3-Events-key/; spec: dom-level-3-events-key
    type: attribute; urlPrefix: #key-
        text: MediaPlayPause; url: MediaPlayPause
        text: MediaTrackPrevious; url: MediaTrackPrevious
        text: MediaTrackNext; url: MediaTrackNext
urlPrefix: http://www.w3.org/TR/page-visibility/; spec: PAGE-VISIBILITY
    type: attribute
        text: visibilityState; url: #dom-document-visibilitystate
    type: event
        text: visibilitychange; url: #sec-visibilitychange-event
    type: enum; urlPrefix: #pv-page-
        text: visible
        text: hidden
urlPrefix: https://www.w3.org/TR/appmanifest/; spec: appmanifest
    type: dfn
        text: image object; url: #dfn-image-object
urlPrefix: https://heycam.github.io/webidl/
    type: exception
        text: InvalidStateError
        text: NotAllowedError
</pre>

<h2 id="introduction">Introduction</h2>

<em>This section is non-normative.</em>

Media is used extensively today, and the Web is one of the primary means of
consuming media content. Many platforms can display media metadata, such as
title, artist, album and album art on various UI elements such as notification,
media control center, device lockscreen and wearable devices. This specification
aims to enable web pages to specify the media metadata to be displayed in
platform UI, which helps in improving the user experience.

<h2 id="conformance">Conformance</h2>

All diagrams, examples, and notes in this specification are non-normative, as
are all sections explicitly marked non-normative. Everything else in this
specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119. For readability, these
words do not appear in all uppercase letters in this specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms (such as "strip any
leading space characters" or "return false and terminate these steps") are to be
interpreted with the meaning of the key word ("must", "should", "may", etc) used
in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be easy
to follow, and not intended to be performant.)

User agents may impose implementation-specific limits on otherwise unconstrained
inputs, e.g. to prevent denial of service attacks, to guard against running out
of memory, or to work around platform-specific limitations.

When a method or an attribute is said to call another method or attribute, the
user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods
with custom properties or functions in JavaScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a>
manner.

<h2 id="dependencies">Dependencies</h2>

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]

<h2 id="the-mediasession-interface">The {{MediaSession}} interface</h2>

<pre class="idl">
[Exposed=(Window)]
partial interface Navigator {
  readonly attribute MediaSession mediaSession;
};

interface MediaSession {
  attribute MediaMetadata? metadata;
};
</pre>

The <dfn attribute for="Navigator"><code>mediaSession</code></dfn> attribute is
to retrive an instance of the {{MediaSession}} interface. The attribute MUST
return the {{MediaSession}} instance associated with the {{Navigator}} object.

{{MediaSession}} objects are simply known as <dfn lt="media session">media
sessions</dfn>.

A <a>media session</a> has <dfn lt="media session metadata">metadata</dfn>,
which is either a {{MediaMetadata}} object or null.

<dl class=domintro>
  <dt>
    <code><var>session</var> . {{MediaSession/metadata}}</code>
  </dt>
  <dd>
    Returns the <a>media session</a>'s {{MediaMetadata}} object, if any, or null
    otherwise.

    Can be set, to a {{MediaMetadata}} object or null.
  </dd>
</dl>

The <dfn attribute for="MediaSession"><code>metadata</code></dfn> attribute, on
getting, must return the <a>media session</a>'s <a lt="media session
metadata">metadata</a>.

<h2 id="the-mediametadata-interface">The {{MediaMetadata}} interface</h2>

<pre class="idl">

[Constructor(optional MediaMetadataInit init)]
interface MediaMetadata {
  readonly attribute DOMString title;
  readonly attribute DOMString artist;
  readonly attribute DOMString album;
  [SameObject] readonly attribute FrozenArray&lt;MediaImage> artwork;
};

dictionary MediaMetadataInit {
  DOMString title = "";
  DOMString artist = "";
  DOMString album = "";
  sequence&lt;MediaImageInit> artwork = [];
};
</pre>

A {{MediaMetadata}} object has a <dfn for="MediaMetadata">title</dfn>, an <dfn
for="MediaMetadata">artist</dfn>, an <dfn for="MediaMetadata">album</dfn> and a
FrozenArray of <dfn for="MediaMetadata" title="artwork image">artwork
images</dfn>.

The <dfn constructor
for="MediaMetadata"><code>MediaMetadata(<var>init</var>)</code></dfn>
constructor, when invoked, must run the following steps:

<ol>
  <li>
    Let <var>metadata</var> be a new {{MediaMetadata}} object.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaMetadata/title}} to <var>init</var>'s
    {{MediaMetadataInit/title}}.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaMetadata/artist}} to <var>init</var>'s
    {{MediaMetadataInit/artist}}.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaMetadata/album}} to
    <var>init</var>'s {{MediaMetadataInit/album}}.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaMetadata/artwork}} using <var>init</var>'s
    {{MediaMetadataInit/artwork}} by calling the
    <a><code>MediaImage(init)</code></a> constructor.
  </li>
  <li>
    Return <var>metadata</var>.
  </li>
</ol>

The <dfn attribute for="MediaMetadata"><code>title</code></dfn> attribute must
return the {{MediaMetadata}} objects's <a>title</a>.

The <dfn attribute for="MediaMetadata"><code>artist</code></dfn> attribute must
return the {{MediaMetadata}} objects's <a>artist</a>.

The <dfn attribute for="MediaMetadata"><code>album</code></dfn> attribute must
return the {{MediaMetadata}} objects's <a>album</a>.

The <dfn attribute for="MediaMetadata"><code>artwork</code></dfn>
attribute must return the {{MediaMetadata}} objects's <a for="MediaMetadata"
title="artwork image">artwork images</a>, as a FrozenArray of {{MediaImage}}s.
The <a attribute for="MediaMetadata">artwork</a> attribute can be empty.

<h2 id="the-mediaimage-interface">The {{MediaImage}} interface</h2>

<pre class="idl">

[Constructor(optional MediaImageInit init)]
interface MediaImage {
  readonly attribute USVString src;
  readonly attribute DOMString sizes;
  readonly attribute DOMString type;
};

dictionary MediaImageInit {
  USVString src = "";
  DOMString sizes = "";
  DOMString type = "";
};
</pre>

A {{MediaImage}} object has a <dfn for="MediaImage">source</dfn>, a list of
<dfn for="MediaImage">sizes</dfn>, and a <dfn for="MediaImage">type</dfn>.

The <dfn constructor
for="MediaImage"><code>MediaImage(<var>init</var>)</code></dfn>
constructor, when invoked, must run the following steps:

<ol>
  <li>
    Let <var>metadata</var> be a new {{MediaImage}} object.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/src}} to <var>init</var>'s
    {{MediaImageInit/src}}. If the URL is a
    <a>relative URL</a>, it must be resolved to an <a>absolute URL</a> using the
    <a>document base URL</a>.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/sizes}} to <var>init</var>'s
    {{MediaImageInit/sizes}}.
  </li>
  <li>
    Set <var>metadata</var>'s {{MediaImage/type}} to <var>init</var>'s
    {{MediaImageInit/type}}.
  </li>
  <li>
    Return <var>metadata</var>.
  </li>
</ol>


The MediaImage <a attribute for="MediaImage">src</a>, <a attribute
for="MediaImage">sizes</a> and <a attribute for="MediaImage">type</a>
inspired from the <a lt="image object">image objects</a> in Web App Manifest.

The <dfn attribute for="MediaImage">src</dfn> attribute must return the
{{MediaImage}} object's <a for="MediaImage">source</a>. It is a URL from which
the user agent can fetch the image's data.

The <dfn attribute for="MediaImage">sizes</dfn> attribute must return the
{{MediaImage}} object's <a for="MediaImage">sizes</a>. It follows the spec of <a
attribute for="HTMLLinkElement"><code>sizes</code></a> attribute in HTML
<a for="HTMLLinkElement"><code>link</code></a> element, which is a string
consisting of an <a>unordered set of unique space-separated tokens</a> which are
<a>ASCII case-insensitive</a> that represents the dimensions of an image. Each
keyword is either an <a>ASCII case-insensitive</a> match for the string "any",
or a value that consists of two valid non-negative integers that do not have a
leading U+0030 DIGIT ZERO (0) character and that are separated by a single
U+0078 LATIN SMALL LETTER X or U+0058 LATIN CAPITAL LETTER X character. The
keywords represent icon sizes in raw pixels (as opposed to CSS pixels). When
multiple image objects are available, a user agent may use the value to decide
which icon is most suitable for a display context (and ignore any that are
inappropriate). The parsing steps for the <a attribute
for="MediaImage">sizes</a> attribute must follow <a attribute
for="HTMLLinkElement" lt="sizes">the parsing steps for HTML <code>link</code>
element <code>sizes</code> attribute</a>.

The <dfn attribute for="MediaImage">type</dfn> attribute must return the
{{MediaImage}} object's <a for="MediaImage">type</a>. It is a hint as to the
media type of the image. The purpose of this attribute is to allow a user agent
to ignore images of media types it does not support.

<h2 id="processing-model">Processing model</h2>

As there is a {{Window}} object per <a>browsing context</a>, the <a>top-level
browsing context</a> and each <a>nested browsing context</a> will have an
associated {{MediaSession}} object. For each tab, the user agent MUST select the
{{MediaSession}} object of the <a>top-level browsing context</a> to represent
the tab. The selected {{MediaSession}} object is called <dfn lt="tab-level
active media session">tab-level active media session</dfn>.

<p class="issue" id="whether-allow-child-frame-media-session">
  It is still an open question whether an {{MediaSession}} object is allowed to
  become the <a>tab-level active media session</a>. See the <a
  href="https://github.com/WICG/mediasession/issues/136">issue on GitHub</a>.
</p>

When the user agent has multiple tabs, the user agent MUST select the <a>most
meaningful audio-producing tab</a> and present the <a>tab-level active media
session</a> to the platform, which MAY be displayed in the platform UI depending
on platform conventions. The <dfn>most meaningful audio-producing tab</dfn> is
the tab which is producing the most meaningful audio to the user. The user agent
SHOULD select the <a>most meaningful audio-producing tab</a> based on platform
conventions and the preferred user experience. The <a>most meaningful
audio-producing tab</a> can be null.

Whenever the <a>most meaningful audio-producing tab</a> changes or setting <a
attribute for="MediaSession"><code>metadata</code></a> of the <a>most meaningful
audio-producing tab</a>, the user agent MUST run the <dfn>update metadata
algorithm</dfn>, the steps are as follows:

<ol>
  <li>
    If the <a>most meaningful audio-producing tab</a> is null, unset the media
    metadata presented to the platform, and terminate these steps.
  </li>
  <li>
    If the <a attribute for="MediaSession"><code>metadata</code></a> for the
    <a>tab-level active media session</a> of the <a>most meaningful
    audio-producing tab</a> is null, unset the media metadata presented to the
    platform, and terminate these steps.
  </li>
  <li>
    Update the media metadata presented to the platform to match the <a
    attribute for="MediaSession"><code>metadata</code></a> for the
    <a>tab-level active media session</a> of the <a>most meaningful
    audio-producing tab</a>.
  </li>
  <li>
    If the user agent wants to display <a>artwork image</a>, it is recommended
    to run the <a>fetch image algorithm</a>.
  </li>
</ol>

The recommended <dfn>fetch image algorithm</dfn> is as follows:

<ol>
  <!-- XXX https://www.w3.org/Bugs/Public/show_bug.cgi?id=24055 -->
  <li>
    If there are other <a>fetch image algorithm</a> running, cancel existing
    algorithm execution instances.
  </li>
  <li>
    If <var>metadata</var>'s <a attribute
    for="MediaMetadata"><code>artwork</code></a> of the <a>tab-level active
    media session</a> of the <a>most meaningful audio-producing tab</a> is
    empty, then terminate these steps.
  </li>
  <li>
    If the platform supports displaying media artwork, select a <dfn>prefered
    artwork image</dfn>
    from <var>metadata</var>'s <a attribute
    for="MediaMetadata"><code>artwork</code></a> of the <a>tab-level active
    media session</a> of the <a>most meaningful audio-producing tab</a>.
  </li>
  <li>
    <a title="fetch">Fetch</a> the <a>prefered artwork image</a>'s
    {{MediaImage/src}}.

    Then, <a>in parallel</a>:

    <ol>
      <li>
        Wait for the <a>response</a>.
      </li>
      <li>
        If the <a>response</a>'s <a>internal response</a>'s
        <a lt="response type">type</a> is <i>default</i>, attempt to decode the
        resource as image.
      </li>
      <li>
        If the image format is supported, use the image as the artwork for
        display in platform UI. Otherwise the <a>fetch image algorithm</a> fail
        and terminate.
      </li>
    </ol>
  </li>
</ol>

If no artwork images are fetched in the <a>fetch image algorithm</a>, the user
agent MAY have fallback behavior such as displaying an default image as artwork.

<h2 id="examples">Examples</h2>

<em>This section is non-normative.</em>

<div class="example" id="example-setting-metadata">

  <pre class="lang-javascript">
    window.navigator.mediaSession.metadata = new MediaMetadata({
      title: "Episode Title",
      artist: "Podcast Host",
      album: "Podcast Title",
      artwork: [{src: "podcast.jpg"}]
    });
  </pre>

  Alternatively, providing multiple <a for="MediaMetadata" title="artwork
  image">artwork images</a> in the metadata can let the user agent be able to
  select different artwork images for different display purposes and better fit
  for different screens:

  <pre class="lang-javascript">
    window.navigator.mediaSession.metadata = new MediaMetadata({
      title: "Episode Title",
      artist: "Podcast Host",
      album: "Podcast Title",
      artwork: [
        {src: "podcast.jpg", sizes: "128x128", type: "image/jpeg"},
        {src: "podcast_hd.jpg", sizes: "256x256"},
        {src: "podcast_xhd.jpg", sizes: "1024x1024", type: "image/jpeg"},
        {src: "podcast.png", sizes: "128x128", type: "image/png"},
        {src: "podcast_hd.png", sizes: "256x256", type: "image/png"},
        {src: "podcast.ico", sizes: "128x128 256x256", type: "image/x-icon"}
      ]
    });
  </pre>

  For example, if the user agent wants to use an image as icon, it may choose
  <code>"podcast.jpg"</code> or <code>"podcast.png"</code> for a
  low-pixel-density screen, and <code>"podcast_hd.jpg"</code>
  or <code>"podcast_hd.png"</code> for a high-pixel-density screen. If the user
  agent want to use an image for lockscreen background,
  <code>"podcast_xhd.jpg"</code> will be prefered.

</div>

<div class="example" id="example-changing-metadata">
  For playlists or chapters of an audio book, multiple <a>media elements</a> can
  share a single <a>media session</a>.

  <pre class="lang-javascript">
    var audio1 = document.createElement("audio");
    audio1.src = "chapter1.mp3";

    var audio2 = document.createElement("audio");
    audio2.src = "chapter2.mp3";

    audio1.play();
    audio1.addEventListener("ended", function() {
      audio2.play();
    });
  </pre>

  Because the session is shared, the metadata must be updated to reflect what is
  currently playing.

  <pre class="lang-javascript">
    function updateMetadata(event) {
      window.navigator.mediaSession.metadata = new MediaMetadata({
        title: event.target == audio1 ? "Chapter 1" : "Chapter 2",
        artist: "An Author",
        album: "A Book",
        artwork: [{src: "cover.jpg"}]
      });
    }

    audio1.addEventListener("play", updateMetadata);
    audio2.addEventListener("play", updateMetadata);
  </pre>
</div>

<h2 id="acknowledgments" class="no-num">Acknowledgments</h2>

The editor would like to thank Paul Adenot, Jake Archibald, Tab Atkins, Jonathan
Bailey, Marcos Caceres, Domenic Denicola, Ralph Giles, Anne van Kesteren, Tobie
Langel, Michael Mahemoff, Jer Noble, Elliott Sprehn, Chris Wilson, and Jörn
Zaefferer for their participation in technical discussions that ultimately made
this specification possible.

Special thanks go to Philip Jägenstedt and David Vest for their help in
designing every aspect of media sessions and for their seemingly infinite
patience in working through the initial design issues; Jer Noble for his help in
building a model that also works well within the iOS audio focus model; and
Mounir Lamouri and Anton Vayvod for their early involvement, feedback and
support in making this specification happen.

This standard is written by Rich Tibbett (<a
href="http://www.opera.com">Opera</a>, <a
href="mailto:richt@opera.com">richt@opera.com</a>).

Per <a rel="license"
href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent
possible under law, the editors have waived all copyright and related or
neighboring rights to this work.

<script id=head src=https://resources.whatwg.org/dfn.js></script>
